name: CICD (Test, Staging, Prod)
permissions: read-all
on:
  push:
    branches:
      - develop
    paths:
      - 'ADW/**'
      - 'DevOps/**'
      - 'parquet/**'
  workflow_dispatch:
    inputs:
      release_version:
        type: choice
        description: Select the release version
        required: true
        options:
          - v1.0.0
          - v1.0.1
          - v1.0.2
          - v1.0.3
          - v1.0.4
          - v1.0.5
          - v1.0.6
          - v1.0.7
          - v1.0.8
          - v1.0.9
          - v1.0.10
          - v1.0.11
          - v1.0.12
          - v1.0.13
          - v1.0.14
          - v1.0.15
          - v1.0.16
          - v1.0.17
          - v1.0.18
          - v1.0.19
          - v1.0.20
          - v1.0.21
          - v1.0.22
          - v1.0.23
          - v1.0.24
          - v1.0.25
          - v1.0.26
          - v1.0.27
          - v1.0.28
          - v1.0.29
          - v1.0.30
          - v1.0.31
          - v1.0.32
          - v1.0.33
          - v1.0.34
          - v1.0.35
          - v1.0.36
          - v1.0.37
          - v1.0.38
          - v1.0.39
          - v1.0.40
          - v1.0.41
          - v1.0.42
          - v1.0.43
          - v1.0.44
          - v1.0.45
          - v1.0.46
          - v1.0.47
          - v1.0.48
          - v1.0.49
          - v1.0.50

jobs:
  
  package:
    uses: ./.github/workflows/package.yml
    with:
      release_version: ${{ github.event.inputs.release_version }}
    secrets: inherit

  prepare-projects:
    needs: package
    runs-on: ubuntu-latest
    outputs:
        matrix: ${{ steps.matrix.outputs.value }}
    steps:

      - name: Ensure permissions
        run: chmod -R u+rwx ${{ github.workspace }}
  
      - name: Remove anything
        if: always()  # This ensures that the step runs regardless of the outcome of previous steps
        run: |
          rm -rf ${{ github.workspace }}/*

      - name: Download and extract release asset
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ github.repository }}
          tag: ${{ needs.package.outputs.release_version }}
          fileName: 'ADW-${{ needs.package.outputs.release_version }}.zip'
          latest: false
          extract: true

        # Step to read the projects from the YAML file and output them as a matrix array
      - name: Setup Matrix
        id: matrix
        run: |

            # Read the project names from the YAML file
            projects=$(yq eval '.projects[]' deployment.yml)

            # Convert the projects list to JSON format for the matrix
            projects_json=$(echo "$projects" | jq -R . | jq -s -c .)

            # Output the matrix as a JSON array
            echo "value=$projects_json" >> $GITHUB_OUTPUT

      - name: Debug Output
        run: |
            # Debug: Output the value of the matrix that was extracted from the YAML file
            echo "${{ steps.matrix.outputs.value }}"

  print-release:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Print Release Version
        run: |
          echo "Selected release for deployment: ${{ needs.package.outputs.release_version }}"

  TEST-DEPLOY:
    needs: [package, prepare-projects]
    strategy:
      matrix:
        project_name: ${{ fromJSON(needs.prepare-projects.outputs.matrix) }}
    uses: ./.github/workflows/deploy-environment.yml
    with:
      environment: TEST
      project_name: ${{ matrix.project_name }}
      release_version: ${{ needs.package.outputs.release_version }}
    secrets: inherit

  STAGING-DEPLOY:
    needs: [package, prepare-projects, TEST-DEPLOY]
    strategy:
      matrix:
        project_name: ${{ fromJSON(needs.prepare-projects.outputs.matrix) }}
    uses: ./.github/workflows/deploy-environment.yml
    with:
      environment: STG
      project_name: ${{ matrix.project_name }}
      release_version: ${{ needs.package.outputs.release_version }}
    secrets: inherit

  PROD-DEPLOY:
    needs: [package, prepare-projects, STAGING-DEPLOY]
    strategy:
      matrix:
        project_name: ${{ fromJSON(needs.prepare-projects.outputs.matrix) }}
    uses: ./.github/workflows/deploy-environment.yml
    with:
      environment: PRD
      project_name: ${{ matrix.project_name }}
      release_version: ${{ needs.package.outputs.release_version }}
    secrets: inherit
