name: Deploy to ADW Workflow
permissions: read-all
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      project_name:
        required: true
        type: string
      release_version:
        required: true
        type: string

jobs:

  deploy: 
    runs-on: ${{ inputs.environment == 'TEST' && vars.RUNNER_NAME_TEST || (inputs.environment == 'STG' && vars.RUNNER_NAME_STG || vars.RUNNER_NAME_PROD) }}
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Set up environment
      run: |
        echo "RELEASE_VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV
        if [[ "${{ inputs.environment }}" == "TEST" ]] || [[ "${{ inputs.environment }}" == "PRD" ]]; then
            echo "PROFILE=DEFAULT" >> $GITHUB_ENV
        elif [[ "${{ inputs.environment }}" == "STG" ]]; then
            echo "PROFILE=STG" >> $GITHUB_ENV
        fi

    - name: Get the latest release (if release_version is not specified)
      id: get_latest_release
      if: inputs.release_version == ''
      uses: actions/github-script@v4
      with:
        script: |
            const latestRelease = await github.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo
            });
            return latestRelease.data.tag_name;

    - name: Ensure permissions
      run: chmod -R u+rwx ${{ github.workspace }}

    - name: Remove anything
      if: always()  # This ensures that the step runs regardless of the outcome of previous steps
      run: |
        rm -rf ${{ github.workspace }}/*

    - name: Download and extract release asset
      uses: robinraju/release-downloader@v1
      with:
        repository: ${{ github.repository }}
        tag: ${{ env.RELEASE_VERSION }}
        fileName: 'ADW-${{ env.RELEASE_VERSION }}.zip'
        latest: false
        extract: true

    - name: Fetch secrets from OCI vault
      id: get_secrets
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        NAMESPACE_OCID: ${{ secrets.NAMESPACE_OCID }}
        TNS_ALIAS_OCID: ${{ secrets.TNS_ALIAS_OCID }}
      run: |
        # Fetch the secret values from OCI Vault and decode them
        NAMESPACE=$(oci secrets secret-bundle get --secret-id "$NAMESPACE_OCID" --profile ${{ env.PROFILE }} --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        TNS_ALIAS=$(oci secrets secret-bundle get --secret-id "$TNS_ALIAS_OCID" --profile ${{ env.PROFILE }} --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        
        case "${{ inputs.project_name }}" in
          WATER_DM)
            SECRET_ID="${{ secrets.WATER_DM_SECRET }}"
            ;;
          OPERATIONS_DM)
            SECRET_ID="${{ secrets.OPERATIONS_DM_SECRET }}"
            ;;
          SOURCE_DM)
            SECRET_ID="${{ secrets.SOURCE_DM_SECRET }}"
            ;;
          COMMON_DM)
            SECRET_ID="${{ secrets.COMMON_DM_SECRET }}"
            ;;
          WQD_DM)
            SECRET_ID="${{ secrets.WQD_DM_SECRET }}"
            ;;
          EMA_DM)
            SECRET_ID="${{ secrets.EMA_DM_SECRET }}"
            ;;
          ENERGY_DM)
            SECRET_ID="${{ secrets.ENERGY_DM_SECRET }}"
            ;;
          WSR_DM)
            SECRET_ID="${{ secrets.WSR_DM_SECRET }}"
            ;;  
          TAWZEA_DM)
            SECRET_ID="${{ secrets.TAWZEA_DM_SECRET }}"
            ;;  
          *)
            echo "Unknown project name: ${{ inputs.project_name }}"
            exit 1
            ;;
        esac
        DB_CREDENTIALS=$(oci secrets secret-bundle get --secret-id "$SECRET_ID" --profile ${{ env.PROFILE }} --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)


        # Mask the secrets
        echo "::add-mask::$NAMESPACE"
        echo "::add-mask::$DB_CREDENTIALS"
        echo "::add-mask::$TNS_ALIAS"
        

        # Set the secret values into GITHUB_OUTPUT
        echo "NAMESPACE=$NAMESPACE" >> $GITHUB_OUTPUT

        echo "DB_CREDENTIALS=$DB_CREDENTIALS" >> $GITHUB_OUTPUT
        echo "TNS_ALIAS=$TNS_ALIAS" >> $GITHUB_OUTPUT
 
    - name: Set execute permissions
      run: chmod +x ./DevOps/plsql/main.sh

    - name: Remove line terminators
      run: sed -i 's/\r//g' ./DevOps/plsql/main.sh

    - name: Set versionid to match release_version
      run: echo "VERSIONID=${{ inputs.release_version }}" >> $GITHUB_ENV

    - name: Define variables and secrets
      env:
        WORKSPACE: ${{ vars.WORKSPACE }}
        SCRIPT_DIR: ${{ vars.SCRIPT_DIR }}
        CREDENTIAL_NAME: ${{ vars.CREDENTIAL_NAME }}
        WNAME: ${{ vars.WNAME }}
        CURATED_BUCKET: ${{ vars.CURATED_BUCKET }}
        RAW_BUCKET: ${{ vars.RAW_BUCKET }}
        PRESENTATION_BUCKET: ${{vars.PRESENTATION_BUCKET}}
        VERSIONID: ${{ env.VERSIONID }}
        PROJECT_NAME: ${{ inputs.project_name }}
        DEPLOY_VERSION: ${{ inputs.release_version }}

        NAMESPACE: ${{ steps.get_secrets.outputs.NAMESPACE }}
        ENV: ${{ steps.get_secrets.outputs.TNS_ALIAS }}
        DB_USERNAME: ${{ inputs.project_name }}
        DB_PASSWORD: "${{ steps.get_secrets.outputs.DB_CREDENTIALS }}"

      run: |
        if find ./ADW/${VERSIONID}/${{ inputs.project_name }}/tables/external -type f -name "*.sql" | grep -q .; then
          for file in ./ADW/${VERSIONID}/${{ inputs.project_name }}/tables/external/*.sql; do
            sed -i "s/CREDENTIAL_NAME/$CREDENTIAL_NAME/g" "$file"
            sed -i "s/RAW_BUCKET/$RAW_BUCKET/g" "$file"
            sed -i "s/CURATED_BUCKET/$CURATED_BUCKET/g" "$file"
            sed -i "s/PRESENTATION_BUCKET/$PRESENTATION_BUCKET/g" "$file"
            sed -i "s/NAMESPACE/$NAMESPACE/g" "$file"
        done
        fi
        ./DevOps/plsql/main.sh

