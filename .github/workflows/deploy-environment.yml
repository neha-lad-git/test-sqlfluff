name: "Deploy-Environment"

on:
  # This is a reusable workflow
  workflow_call:
    inputs: 
      environment:
        description: "Name of the environment to deploy"
        required: true
        type: string
      release_version:
        description: "Release version to deploy"
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - name: Set up environment
      run: |
        echo "RELEASE_VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV
        echo "Deploying release ${{ inputs.release_version }} to ${{ inputs.environment }}"

    - name: Ensure permissions
      run: chmod -R u+rwx ${{ github.workspace }}

    - name: Remove anything
      if: always()  # This ensures that the step runs regardless of the outcome of previous steps
      run: |
        rm -rf ${{ github.workspace }}/*
    
    - name: Download and extract release asset
      uses: robinraju/release-downloader@v1
      with:
        repository: ${{ github.repository }}
        tag: ${{ env.RELEASE_VERSION }}
        fileName: 'ADW-${{ env.RELEASE_VERSION }}.zip'
        latest: false
        extract: true

    - name: Configure OCI CLI
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_PRIVATE_KEY }}" | base64 --decode > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
 
    - name: Set execute permissions
      run: chmod +x ./DevOps/plsql/main.sh

    - name: Remove line terminators
      run: sed -i 's/\r//g' ./DevOps/plsql/main.sh

    - name: Retrieve schema credentials from OCI Vault
      run: |
        case "${{ github.event.inputs.project_name }}" in
          WATER_DM)
            SECRET_ID="${{ secrets.WATER_DM_SECRET }}"
            ;;
          OPERATIONS_DM)
            SECRET_ID="${{ secrets.OPERATIONS_DM_SECRET }}"
            ;;
          SOURCE_DM)
            SECRET_ID="${{ secrets.SOURCE_DM_SECRET }}"
            ;;
          COMMON_DM)
            SECRET_ID="${{ secrets.COMMON_DM_SECRET }}"
            ;;
          WQD_DM)
            SECRET_ID="${{ secrets.WQD_DM_SECRET }}"
            ;;
          ENERGY_DM)
            SECRET_ID="${{ secrets.ENERGY_DM_SECRET }}"
            ;;
          *)
            echo "Unknown project name: ${{ github.event.inputs.project_name }}"
            exit 1
            ;;
        esac
        echo "Checking the valut pass here"
        DB_CREDENTIALS=$(oci secrets secret-bundle get --secret-id "$SECRET_ID" --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        echo "db_credentials=$DB_CREDENTIALS" >> $GITHUB_ENV
    
    - name: Define variables and secrets
      env:
        WORKSPACE: ${{ vars.WORKSPACE }}
        SCRIPT_DIR: ${{ vars.SCRIPT_DIR }}
        CREDENTIAL_NAME: ${{ secrets.CREDENTIAL_NAME }}
        CURATED_BUCKET: ${{ vars.CURATED_BUCKET }}
        RAW_BUCKET: ${{ vars.RAW_BUCKET }}
        PRESENTATION_BUCKET: ${{vars.PRESENTATION_BUCKET}}
        NAMESPACE: ${{ secrets.NAMESPACE }}
        WNAME: ${{ secrets.WNAME }}
        ENV: ${{ secrets.ADW_ENV }}
        DB_USERNAME: ${{ github.event.inputs.project_name }}
        DB_PASSWORD: "${{ env.db_credentials }}"
        PROJECT_NAME: ${{ github.event.inputs.project_name }}
        DEPLOY_VERSION: ${{ github.event.inputs.release_version }}
      run: |
        if find ./ADW/${{ github.event.inputs.release_version }}/${{ github.event.inputs.project_name }}/tables/external -type f -name "*.sql" | grep -q .; then
          for file in ./ADW/${{ github.event.inputs.release_version }}/${{ github.event.inputs.project_name }}/tables/external/*.sql; do
            sed -i "s/CREDENTIAL_NAME/$CREDENTIAL_NAME/g" "$file"
            sed -i "s/RAW_BUCKET/$RAW_BUCKET/g" "$file"
            sed -i "s/CURATED_BUCKET/$CURATED_BUCKET/g" "$file"
            sed -i "s/PRESENTATION_BUCKET/$PRESENTATION_BUCKET/g" "$file"
            sed -i "s/NAMESPACE/$NAMESPACE/g" "$file"
        done
        fi
  
