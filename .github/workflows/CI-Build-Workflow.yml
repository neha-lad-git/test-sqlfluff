name: CI-Build-Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'py/**'

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  versioning:
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      - name: Determine initial version
        id: get_initial_version
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            VERSION="v1.0.0"
          else
            MAJOR=$(echo $LATEST_TAG | awk -F. '{print $1}' | sed 's/v//')
            MINOR=$(echo $LATEST_TAG | awk -F. '{print $2}')
            PATCH=$(echo $LATEST_TAG | awk -F. '{print $3}')
            FILE_ADDED=$(git diff --name-status HEAD~1 HEAD | grep "^A" | wc -l)
            FOLDER_ADDED=$(git diff --name-status HEAD~1 HEAD | grep "^A" | grep "/" | wc -l)
            FILE_MODIFIED=$(git diff --name-status HEAD~1 HEAD | grep "^M" | wc -l)
            if [ $FOLDER_ADDED -gt 0 ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [ $FILE_ADDED -gt 0 ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            elif [ $FILE_MODIFIED -gt 0 ]; then
              PATCH=$((PATCH + 1))
            else
              PATCH=$((PATCH + 1))
            fi
            VERSION="v$MAJOR.$MINOR.$PATCH"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Use Environment Files

  ensure_unique_tag:
    runs-on: ubuntu-latest
    needs: versioning

    steps:
      - name: Ensure unique version tag
        id: ensure_unique_tag
        uses: actions/github-script@v5
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });
            let tagExists = releases.some(release => release.tag_name === process.env.VERSION);
            let newVersion = process.env.VERSION;  // Store the original version
            while (tagExists) {
              const parts = newVersion.split('.');
              parts[2] = (parseInt(parts[2]) + 1).toString();
              newVersion = parts.join('.');
              tagExists = releases.some(release => release.tag_name === newVersion);
            }
            // Store the new version in an environment variable
            console.log(`Setting VERSION=${newVersion}`);
            fs.appendFileSync(process.env.GITHUB_ENV, `VERSION=${newVersion}\n`);  // Use Environment Files
        env:
          GITHUBTOKEN: ${{ secrets.GITHUBTOKEN }}

  package_code:
    runs-on: ubuntu-latest
    needs: ensure_unique_tag

    steps:
      - name: Package the code
        run: |
          # Ensure the VERSION is set correctly from the environment
          VERSION="${{ env.VERSION }}"
          echo "Packaging code with version: $VERSION"
          if [ -n "$VERSION" ]; then
            zip -r TEST-"$VERSION".zip .
          else
            echo "Error: VERSION is not set. Exiting."
            exit 1
          fi
