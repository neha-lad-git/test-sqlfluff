name: Deployment-Workflow
 
on:
    workflow_dispatch:
      inputs:
        environment:
          description: 'Select the environment to deploy to'
          required: true
          default: 'TEST'
          type: choice
          options:
            - TEST
            - STG
            - PRD
        release_version:
          type: choice
          description: Select the release version
          required: true
          options:
            - v1.0.0
            - v1.0.1
            - v1.0.2
            - v1.0.3
            - v1.0.4
            - v1.0.5
            - v1.0.6 
            - v1.0.7 
            - v1.0.8 
            - v1.0.9 
            - v1.0.10 
            - v1.0.11
            - v1.0.12
            - v1.0.13
            - v1.0.14
            - v1.0.15
            - v1.0.16
            - v1.0.17
            - v1.0.18
            - v1.0.19
            - v1.0.20
            - v1.0.21
            - v1.0.22
            - v1.0.23
            - v1.0.24
            - v1.0.25
            - v1.0.26
            - v1.0.27
            - v1.0.28
            - v1.0.29
            - v1.0.30
            - v1.0.31
            - v1.0.32
            - v1.0.33
            - v1.0.34
            - v1.0.35
            - v1.0.36
            - v1.0.37
            - v1.0.38
            - v1.0.39
            - v1.0.40
            - v1.0.41
            - v1.0.42
            - v1.0.43
            - v1.0.44
            - v1.0.44
            - v1.0.45
            - v1.0.46
            - v1.0.47
            - v1.0.48
            - v1.0.49
            - v1.0.50
            - v1.0.51
            - v1.0.52
            - v1.0.53
            - v1.0.54
            - v1.0.55
            - v1.0.56
            - v1.0.57
            - v1.0.58
            - v1.0.59
            - v1.0.60
            - v1.0.61
            - v1.0.62
            - v1.0.63
            - v1.0.64
            - v1.0.65
            - v1.0.66
            - v1.0.67
            - v1.0.68
            - v1.0.69
            - v1.0.70
        project_name:
          type: choice
          description: Select the project you wish to deploy
          default: ''
          required: true
          options:
            - WATER_DM
            - OPERATIONS_DM
            - SOURCE_DM
            - COMMON_DM
            - WQD_DM
            - ENERGY_DM
            - EMA_DM
jobs:
  deploy:
    runs-on: ${{ github.event.inputs.environment == 'TEST' && vars.RUNNER_NAME_TEST || (github.event.inputs.environment == 'STG' && vars.RUNNER_NAME_STG || vars.RUNNER_NAME_PROD) }}
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Set up environment
      run: |
        echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
    - name: Get the latest release (if release_version is not specified)
      id: get_latest_release
      if: github.event.inputs.release_version == ''
      uses: actions/github-script@v4
      with:
        script: |
          const latestRelease = await github.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          return latestRelease.data.tag_name;
    - name: Set release version to latest (if release_version is not specified)
      if: github.event.inputs.release_version == ''
      run: echo "RELEASE_VERSION=${{ steps.get_latest_release.outputs.result }}" >> $GITHUB_ENV

    - name: Ensure permissions
      run: chmod -R u+rwx ${{ github.workspace }}

    - name: Remove anything
      if: always()  # This ensures that the step runs regardless of the outcome of previous steps
      run: |
        rm -rf ${{ github.workspace }}/*
    
    - name: Download and extract release asset
      uses: robinraju/release-downloader@v1
      with:
        repository: ${{ github.repository }}
        tag: ${{ env.RELEASE_VERSION }}
        fileName: 'ADW-${{ env.RELEASE_VERSION }}.zip'
        latest: false
        extract: true

    - name: Fetch secrets from OCI vault
      id: get_secrets
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment }}
        NAMESPACE_OCID: ${{ secrets.NAMESPACE_OCID }}
        USER_PRIVATE_KEY_OCID: ${{ secrets.USER_PRIVATE_KEY_OCID }}
        USER_OCID: ${{ secrets.USER_OCID }}
        USER_FINGERPRINT_OCID: ${{ secrets.USER_FINGERPRINT_OCID }}
        TENANCY_OCID: ${{ secrets.TENANCY_OCID }}
        TNS_ALIAS_OCID: ${{ secrets.TNS_ALIAS_OCID }}
      run: |
        # Fetch the secret values from OCI Vault and decode them
        NAMESPACE=$(oci secrets secret-bundle get --secret-id "$NAMESPACE_OCID" --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        USER_PRIVATE_KEY=$(oci secrets secret-bundle get --secret-id "$USER_PRIVATE_KEY_OCID" --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        USER_OCID_VALUE=$(oci secrets secret-bundle get --secret-id "$USER_OCID" --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        USER_FINGERPRINT=$(oci secrets secret-bundle get --secret-id "$USER_FINGERPRINT_OCID" --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        TENANCY_OCID=$(oci secrets secret-bundle get --secret-id "$TENANCY_OCID" --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        TNS_ALIAS=$(oci secrets secret-bundle get --secret-id "$TNS_ALIAS_OCID" --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
        
        case "${{ github.event.inputs.project_name }}" in
          WATER_DM)
            SECRET_ID="${{ secrets.WATER_DM_SECRET }}"
            ;;
          OPERATIONS_DM)
            SECRET_ID="${{ secrets.OPERATIONS_DM_SECRET }}"
            ;;
          SOURCE_DM)
            SECRET_ID="${{ secrets.SOURCE_DM_SECRET }}"
            ;;
          COMMON_DM)
            SECRET_ID="${{ secrets.COMMON_DM_SECRET }}"
            ;;
          WQD_DM)
            SECRET_ID="${{ secrets.WQD_DM_SECRET }}"
            ;;
          EMA_DM)
            SECRET_ID="${{ secrets.EMA_DM_SECRET }}"
            ;;
          ENERGY_DM)
            SECRET_ID="${{ secrets.ENERGY_DM_SECRET }}"
            ;;
          *)
            echo "Unknown project name: ${{ github.event.inputs.project_name }}"
            exit 1
            ;;
        esac
        DB_CREDENTIALS=$(oci secrets secret-bundle get --secret-id "$SECRET_ID" --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)


        # Mask the secrets
        echo "::add-mask::$COMPARTMENT_ID"
        echo "::add-mask::$NAMESPACE"
        echo "$USER_PRIVATE_KEY" | while IFS= read -r line; do
        echo "::add-mask::$line"
        done
        echo "::add-mask::$USER_OCID_VALUE"
        echo "::add-mask::$USER_FINGERPRINT"
        echo "::add-mask::$TENANCY_OCID"
        echo "::add-mask::$DB_CREDENTIALS"
        echo "::add-mask::$TNS_ALIAS"
        

        # Set the secret values into GITHUB_OUTPUT
        echo "COMPARTMENT_ID=$COMPARTMENT_ID" >> $GITHUB_OUTPUT
        echo "NAMESPACE=$NAMESPACE" >> $GITHUB_OUTPUT

        echo "USER_PRIVATE_KEY<<EOF" >> $GITHUB_OUTPUT
        echo "$USER_PRIVATE_KEY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "USER_OCID=$USER_OCID_VALUE" >> $GITHUB_OUTPUT
        echo "USER_FINGERPRINT=$USER_FINGERPRINT" >> $GITHUB_OUTPUT
        echo "TENANCY_OCID=$TENANCY_OCID" >> $GITHUB_OUTPUT
        echo "DB_CREDENTIALS=$DB_CREDENTIALS" >> $GITHUB_OUTPUT
        echo "TNS_ALIAS=$TNS_ALIAS" >> $GITHUB_OUTPUT

    - name: Configure OCI CLI
      env: 
        OCI_REGION: ${{ vars.OCI_REGION }}
        USER_OCID: ${{ steps.get_secrets.outputs.USER_OCID }}
        USER_PRIVATE_KEY: ${{ steps.get_secrets.outputs.USER_PRIVATE_KEY }}
        USER_FINGERPRINT: ${{ steps.get_secrets.outputs.USER_FINGERPRINT }}
        TENANCY_OCID: ${{ steps.get_secrets.outputs.TENANCY_OCID }}
      run: |
        mkdir -p ~/.oci
        echo "${{ env.USER_PRIVATE_KEY }}" | base64 --decode > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem
        echo "[DEFAULT]" > ~/.oci/config
        echo "user=${{ env.USER_OCID }}" >> ~/.oci/config
        echo "fingerprint=${{ env.USER_FINGERPRINT }}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        echo "tenancy=${{ env.TENANCY_OCID }}" >> ~/.oci/config
        echo "region=${{ env.OCI_REGION }}" >> ~/.oci/config
 
    - name: Set execute permissions
      run: chmod +x ./DevOps/plsql/main.sh

    - name: Remove line terminators
      run: sed -i 's/\r//g' ./DevOps/plsql/main.sh

    - name: Set versionid to match release_version
      run: echo "VERSIONID=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV

    - name: Define variables and secrets
      env:
        WORKSPACE: ${{ vars.WORKSPACE }}
        SCRIPT_DIR: ${{ vars.SCRIPT_DIR }}
        CREDENTIAL_NAME: ${{ vars.CREDENTIAL_NAME }}
        WNAME: ${{ vars.WNAME }}
        CURATED_BUCKET: ${{ vars.CURATED_BUCKET }}
        RAW_BUCKET: ${{ vars.RAW_BUCKET }}
        PRESENTATION_BUCKET: ${{vars.PRESENTATION_BUCKET}}
        VERSIONID: ${{ env.VERSIONID }}
        PROJECT_NAME: ${{ github.event.inputs.project_name }}
        DEPLOY_VERSION: ${{ github.event.inputs.release_version }}

        NAMESPACE: ${{ steps.get_secrets.outputs.NAMESPACE }}
        ENV: ${{ steps.get_secrets.outputs.TNS_ALIAS }}
        DB_USERNAME: ${{ github.event.inputs.project_name }}
        DB_PASSWORD: "${{ steps.get_secrets.outputs.DB_CREDENTIALS }}"

      run: |
        if find ./ADW/${VERSIONID}/${{ github.event.inputs.project_name }}/tables/external -type f -name "*.sql" | grep -q .; then
          for file in ./ADW/${VERSIONID}/${{ github.event.inputs.project_name }}/tables/external/*.sql; do
            sed -i "s/CREDENTIAL_NAME/$CREDENTIAL_NAME/g" "$file"
            sed -i "s/RAW_BUCKET/$RAW_BUCKET/g" "$file"
            sed -i "s/CURATED_BUCKET/$CURATED_BUCKET/g" "$file"
            sed -i "s/PRESENTATION_BUCKET/$PRESENTATION_BUCKET/g" "$file"
            sed -i "s/NAMESPACE/$NAMESPACE/g" "$file"
        done
        fi
        ./DevOps/plsql/main.sh
